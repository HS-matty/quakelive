menu
Status #qldedsrvX #stats.qlX
#stats.ql: :: Channel for people collaborating in efforts to create global ranking and balancing system for Quake Live ::
[12:07] == [ByQ]Descent [webchat@95.128.68.50] has joined #stats.ql
[12:07] Channel names begin with # (corrected automatically).
[12:39] == vixterra [~vixterra@Vixterra.users.quakenet.org] has quit [Signed off]
[12:57] == PREDATH0R has changed nick to PredatH0r
[13:08] == PerpetualWa_afk has changed nick to PerpetualWar_
[13:15] <@PredatH0r> just what the world needs... yet another website framework
[13:17] <@PredatH0r> 0 documentation and even the project start page doesn't mention what it is all about
[13:17] <@PredatH0r> good chance to become the next hot thing :)
[13:37] == PerpetualWar_ has changed nick to PerpetualWa_afk
[15:03] <[ByQ]Descent> You talking about what?
[15:08] <[ByQ]Descent> it's not production branch (if it's about <ready2go>),  pure show off ...
[15:16] <[ByQ]Descent> .. real stuff is waiting its time  =)
[16:14] == PerpetualWa_afk has changed nick to PerpetualWar_
[17:08] == PerpetualWar_ has changed nick to PerpetualWa_afk
[17:30] == PerpetualWa_afk has changed nick to PerpetualWar_
[17:58] == PerpetualWar_ has changed nick to PerpetualWa_afk
[18:12] == PerpetualWa_afk has changed nick to PerpetualWar_
[19:24] <@PredatH0r> inl, rules: i was thinking a bit about the stats tracking system
[19:24] <@PredatH0r> and had the idea to use a tiny game-server-side nodejs tool instead of a direct zmq connection
[19:25] <@PredatH0r> that would allow a couple things which are currently not possible
[19:26] <@PredatH0r> game servers could store their jsons locally and trackers can load them with a small delay when there was an outage
[19:26] <@PredatH0r> the local nodjs could use an rcon connection to pull additional info from the server, like the whole configvars
[19:27] <@PredatH0r> and the local nodejs with rcon could send an infomessage to each connecting player
[19:28] <@PredatH0r> it could also listen to console chat and could react on commands like "!shuffle" if that is desired
[20:25] <@inl> i like that idea quite a bit
[20:25] <@inl> i'd dare say we could have both actually
[20:26] <@inl> register server online makes it easy for mainstream user
[20:26] <@inl> hard core admins will have to option to go deeper
[20:26] <@rulex> make it a minqlx plugin
[20:27] <@inl> i don't know how minqlx is integrating with ql at first i thought it just was zmq rcon integration
[20:27] <@inl> but he hooks into the game somehow?
[20:27] <@rulex> yes
[20:27] <@rulex> but also to zmq stats
[20:28] <@rulex> could even do a minqlx plugin to automagically register a server on the site when a ql server starts
[20:29] <@rulex> that would actually be neat
[20:29] <@rulex> the plugin lets us know which ip/host/pass to connect to..?
[20:29] <@inl> hmm
[20:30] <@inl> we need some way to authenticate the user
[20:30] <@rulex> u set your steam id in minqlx
[20:30] <@inl> POST /server { information in json }
[20:31] <@inl> I would say that they'd have to register online to and acquire a authentication key/token.
[20:31] <@rulex> sure that works
[20:32] <@inl> stea
[20:36] <@rulex> :D
[20:38] <@PredatH0r> since minqlx doesn't run on my windows server, i won't be writing any plugins that depend on it
[20:39] <@PredatH0r> also requiring admins to use minqlx ... something i rather avoid when possible
[20:40] <@rulex> but another plugin instead? :)
[20:40] <@PredatH0r> well, i dunno. i'm just thinking out loud
[20:41] <@PredatH0r> i mean there is only 2 or 3 windows ded servers out there, so i understand when nobody cares about those
[20:41] <@PredatH0r> unlucky for me, i have one of them
[20:42] <@rulex> :D
[20:42] <@rulex> infinitely more love than linux client
[20:43] <@PredatH0r> i came up with the idea because i want to run a special server where i need to send out a welcome/info message to each connecting client
[20:43] <@PredatH0r> for that i'd need a script that connects to zmq to get connection-notification and to rcon to be able to print out text
[20:44] <@PredatH0r> and the other thought was to have the servers cache their JSONs in case a tracker is temporarily offline
[20:46] <@PredatH0r> unrelated to that: i talked to sirax yesterday. he said that qlranks was running on a 8core, 32gb ram machine and had 80% cpu utilization 24/7 and millions of API calls each day
[20:46] <@PredatH0r> db itself was ~10gb
[20:50] <@inl> i'm pretty sure you can solve that with ql-server-monitor npm package
[20:51] <@inl> hmm, sounds like they didn't do caching properly.
[20:51] <@PredatH0r> maybe. dunno. putting steamid+elo into redis sounds like a good idea
[20:52] <@inl> i'd say even more stuff and have cachening in-front of that
[20:52] <@PredatH0r> that stuff was queried from extraQL userscripts all over the place
[20:52] <@inl> like an api call to /players/online can easily be cached for 15-30 secs
[20:52] <@PredatH0r> yea, all data for the 1000 or so last active users could be kept in-memory
[20:53] <@inl> mongodb sorts that for us i think
[20:53] <@inl> thing is with redis is that you need to flatten out your json objects
[20:54] <@inl> storing json as string and JSON.parse, not so keen on it tbh
[20:54] <@PredatH0r> i wouldn't store any jsons there ... or really only tiny ones suitable for JSON.parse
[20:54] <@inl> anywho, my daughter just feel asleep and wife is out so i'm going to spend time on coding.
[20:56] <@inl> my hope is that i can get a react.js app framework up and make the refactoring of ql-stats-engine to work (it's a major overhaul) but it'll make it really easy to understand the code, where to put persistance into redis and mongo and when to perform calculations for rankings etc.
[20:57] <@PredatH0r> i got my NoSQL book today that I ordered on the weekend. funny enough in the intro they mention the same 2 reasons why to use NoSQL that i came up with after reading in the web
[20:57] <@inl> that includes a first draft of the data model
[20:57] <@inl> PredatH0r nice!
[20:58] <@inl> i'm thinking that it might be and idea to create a github organization and put repositories there
[20:58] <@PredatH0r> it's basically faster development when you dont have to deal with data mapping... or clustering
[20:58] <@inl> oh yes
[20:58] <@inl> mongodb/nosql has made me so much faster when developing
[20:59] <@PredatH0r> but it comes at a price. the db is no longer suitable for application integration (if there is more than one app) and it lacks consistency, like atomic transactions between 2 tables provide
[21:00] <@inl> yeah, wouldn't make much sense for transactional data
[21:00] <@PredatH0r> anyhow, neither should be really a show-stopper for this project
[21:00] <@inl> like banking / trading etc
[21:01] <@PredatH0r> you already have this problem here, when you have a "games" collection and a "players" collection where you keep running tallies
[21:01] <@PredatH0r> there's no way to guarantee the the two can be kept in sync
[21:01] <@inl> i'm actually thinking of embedding documents within documents, for instance, appending player stats at a certain point into a game stats document.
[21:02] <@inl> but that's just loose thought i had, i need to contemplate it a bit more
[21:02] <@PredatH0r> i would certainly do that
[21:03] <@PredatH0r> that's when nosql starts getting a performance benefit over rdbms, when you embed data
[21:04] <@PredatH0r> i mean, the per-game-player-stats should go inside the game data. but still have a separate players collection with running tallies over all matches of the player
[21:10] <@PredatH0r> thinking about it a bit more... i start to like the minbotql thing
[21:11] <@PredatH0r> like auto-adding a "stats" or "ranked" tag so i can find the servers easier
[23:04] == tjone270_ [~tjone270@1.132.96.247] has joined #stats.ql
[23:04] == mode/#stats.ql [+o tjone270_] by Q
[23:08] == tjone270 [~tjone270@tho1717339.lnk.telstra.net] has quit [Ping timeout]
[23:08] <@inl> I'm finally done with refactoring the ql-stats-engine, and I can start focusing on implementing the data schema.
[23:17] == tjone270_ [~tjone270@1.132.96.247] has quit [Ping timeout]
[23:21] == tjone270 [~tjone270@tho1717339.lnk.telstra.net] has joined #stats.ql
[23:21] == mode/#stats.ql [+o tjone270] by Q
[00:14] == vixterra [~vixterra@Vixterra.users.quakenet.org] has joined #stats.ql
[00:25] == PerpetualWar_ has changed nick to PerpetualWa_afk
[03:24] == PredatH0r has changed nick to PREDATH0R
[03:35] <[ByQ]Descent> =)